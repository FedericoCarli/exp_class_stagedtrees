any(c_name == c("st_hc_indep_7", "st_hc_indep_mi_7", "st_hc_indep_cmi_7", "st_hc_indep_ch_7",
"st_bhc_7", "st_bhc_mi_7", "st_bhc_cmi_7", "st_bhc_ch_7",
"st_hc_full_5", "st_hc_full_mi_5", "st_hc_full_cmi_5", "st_hc_full_ch_5"))
d == "tic_tac_toe" & any(c_name == c("st_hc_indep_7", "st_hc_indep_mi_7", "st_hc_indep_cmi_7", "st_hc_indep_ch_7",
"st_bhc_7", "st_bhc_mi_7", "st_bhc_cmi_7", "st_bhc_ch_7",
"st_hc_full_5", "st_hc_full_mi_5", "st_hc_full_cmi_5", "st_hc_full_ch_5"))
datasets
r
torun
for (c_name in torun[-c(1:16)]){
if(d == "tic_tac_toe" & any(c_name == c("st_hc_indep_7", "st_hc_indep_mi_7", "st_hc_indep_cmi_7", "st_hc_indep_ch_7",
"st_bhc_7", "st_bhc_mi_7", "st_bhc_cmi_7", "st_bhc_ch_7",
"st_hc_full_5", "st_hc_full_mi_5", "st_hc_full_cmi_5", "st_hc_full_ch_5")))
{
next
}
# message(c_name)
c_fun <- get(c_name)
time <- system.time(predict <- c_fun(train, test, optimizecutoff = TRUE))[3]
filename <- paste0(res_path, c_name, "_", r, ".rds")
if(time > 60) { cat(c_name, ":", time, "\n") }
saveRDS(list(time = time, predict = predict$pred, probability = predict$prob,
cutoff = predict$cutoff), file = filename)
}
load("~/Desktop/Swiss Re/AlessandroUgolini/Stesura Paper/codice completo.RData")
str(all)
library(gRbase)
library(gRim)
str(dati0)
summary(dati0)
levels(dati0$origine_etnica)
dati0$origine_etnica <- factor(dati0$origine_etnica)
str(dati0)
summary(dati0)
dati0[dati0$origine_etnica == "S", ]
all[all$origine_etnica == "S", ]
colnames(all)
all[all$origine_etnica == "S", c(3, 4, 5,6,7,8:29,33,35,36,52:63,81:92,110:126)]
all[all$origine_etnica == "S", c(3, 4, 5,8:29,33,35,36,52, 55:63,81,84:92,110:126)]
not_italian <- all[all$origine_etnica == "S", c(3, 4, 5,8:29,33,35,36,52, 55:63,81,84:92,110:126)]
write.csv(not_italian, file = "/Users/federico/Desktop/Swiss Re/AlessandroUgolini/Stesura Paper/not_italian.csv")
write.csv(not_italian, file = "/Users/federico/Desktop/Swiss Re/AlessandroUgolini/Stesura Paper/not_italian.csv", sep = ";")
write.csv(not_italian, file = "/Users/federico/Desktop/Swiss Re/AlessandroUgolini/Stesura Paper/not_italian.csv", row.names = FALSE)
write.csv(not_italian, file = "/Users/federico/Desktop/Swiss Re/AlessandroUgolini/Stesura Paper/not_italian.csv", row.names = FALSE, sep = ",")
write.csv2(not_italian, file = "/Users/federico/Desktop/Swiss Re/AlessandroUgolini/Stesura Paper/not_italian.csv", row.names = FALSE, sep = ",")
# MODELLO SATURO
mod0 <- dmod(~.^., data = dati0)  # 276 obs. of  9 variables
# STIMA STEPWISE
mod1 <- stepwise(mod0)
mod1
mod0
dati0
str(dati0)
mod0
# MODELLO SATURO
mod0 <- dmod(~.^., data = dati0)  # 276 obs. of  9 variables
# STIMA STEPWISE
mod1 <- stepwise(mod0)
mod1
summary(mod1)
plot(mod1)
plot(mod1)
plot(as(mod1, "igraph"))
colnames(dati0)
summary(dati0)
colnames(dati0) <- c("origine_etnica", "tipo_allattamento", "lavare_denti", "igiene_orale",
"bibite", "verdure", "durata_allattamento", "durata_ciuccio", "variazione_carie")
# MODELLO SATURO
mod0 <- dmod(~.^., data = dati0)  # 276 obs. of  9 variables
# STIMA STEPWISE
mod1 <- stepwise(mod0)
mod1
mod0
summary(mod1)
plot(as(mod1, "igraph"))
not_italian
colnames(not_italian)
senza_italiani <- dati0[dati0$origine_etnica == "S", ]
colnames(senza_italiani)
mod0_no <- dmod(~.^., data = senza_italiani)
mod0_no
mod1_no <- stepwise(mod0_no)
mod1_no
str(senza_italiani)
senza_italiani <- dati0[dati0$origine_etnica == "S", -1]
str(senza_italiani)
mod0_no <- dmod(~.^., data = senza_italiani)
mod0_no
mod1_no <- stepwise(mod0_no)
mod1_no
plot(as(mod1, "igraph"))
plot(as(mod1_no, "igraph"))
str(dati0)
276-39
devtools::install_github("gherardovarando/stagedtrees")
devtools::install_github("gherardovarando/stagedtrees")
library(devtools)
devtools::install_github("gherardovarando/stagedtrees")
devtools::install_github("gherardovarando/stagedtrees", "main")
library(stagedtrees)
install.packages("bnlearn")
install.packages("bnlearn")
install.packages("magrittr")
install.packages("magrittr")
36*7
mod1 <- stages_hc(full(Titanic))
mod1$stages
mod1 <- stndnaming(stages_hc(full(Titanic)))
mod1$stages
mod1 <- stndnaming(stages_hc(indep(Titanic)))
mod1$stages
set.seed(2020)
for (d in datasets){
message(d)
timestamp()
res_path <- paste0("results_2_0_0/",d,"/")
dir.create(res_path, showWarnings = FALSE)
data <- readRDS(paste0("datasets/", d, ".rds"))
split_path <- paste0("splits/", d, "/")
for (r in 2:2){
# message(r)
id_test <- readRDS(paste0(split_path, r, "_id_test.rds"))
train <- data[-id_test,]
test <- data[id_test,]
for (c_name in torun){
if(d == "tic_tac_toe" & any(c_name == c("st_hc_indep_7", "st_hc_indep_mi_7", "st_hc_indep_cmi_7", "st_hc_indep_ch_7",
"st_bhc_7", "st_bhc_mi_7", "st_bhc_cmi_7", "st_bhc_ch_7",
"st_hc_full_5", "st_hc_full_mi_5", "st_hc_full_cmi_5", "st_hc_full_ch_5")))
{
next
}
# message(c_name)
c_fun <- get(c_name)
time <- system.time(predict <- c_fun(train, test, optimizecutoff = TRUE))[3]
filename <- paste0(res_path, c_name, "_", r, ".rds")
if(time > 60) { cat(c_name, ":", time, "\n") }
saveRDS(list(time = time, predict = predict$pred, probability = predict$prob,
cutoff = predict$cutoff), file = filename)
}
}
}
args <- commandArgs(trailingOnly = TRUE)
datasets <- factor(read.table("binary_fast_datasets_names.tsv")[, 1])
source("methods.R")
if (length(args) > 0){
if (base::endsWith(args[1], ".tsv")){
datasets <- read.table(args[1])[,1]
}else{ ## it is the name of a dataset
datasets <- args[1]
}
}
if (length(args) > 1){
torun <- unlist(sapply(args[-1], function(x){
if (base::endsWith(x, "_")){
classifiers[base::startsWith(classifiers, x)]
}else{
x
}
}))
}else{
torun <- classifiers
}
set.seed(2020)
for (d in datasets){
message(d)
timestamp()
res_path <- paste0("results_2_0_0/",d,"/")
dir.create(res_path, showWarnings = FALSE)
data <- readRDS(paste0("datasets/", d, ".rds"))
split_path <- paste0("splits/", d, "/")
for (r in 2:2){
# message(r)
id_test <- readRDS(paste0(split_path, r, "_id_test.rds"))
train <- data[-id_test,]
test <- data[id_test,]
for (c_name in torun){
if(d == "tic_tac_toe" & any(c_name == c("st_hc_indep_7", "st_hc_indep_mi_7", "st_hc_indep_cmi_7", "st_hc_indep_ch_7",
"st_bhc_7", "st_bhc_mi_7", "st_bhc_cmi_7", "st_bhc_ch_7",
"st_hc_full_5", "st_hc_full_mi_5", "st_hc_full_cmi_5", "st_hc_full_ch_5")))
{
next
}
# message(c_name)
c_fun <- get(c_name)
time <- system.time(predict <- c_fun(train, test, optimizecutoff = TRUE))[3]
filename <- paste0(res_path, c_name, "_", r, ".rds")
if(time > 60) { cat(c_name, ":", time, "\n") }
saveRDS(list(time = time, predict = predict$pred, probability = predict$prob,
cutoff = predict$cutoff), file = filename)
}
}
}
##------ Fri Oct 30 12:38:15 2020 ------##
##------ Fri Oct 30 12:39:06 2020 ------##
##------ Fri Oct 30 12:43:01 2020 ------##
##------ Fri Oct 30 12:44:05 2020 ------##
##------ Fri Oct 30 12:47:13 2020 ------##
##------ Fri Oct 30 12:49:45 2020 ------##
##------ Fri Oct 30 13:07:17 2020 ------##
##------ Fri Oct 30 13:36:56 2020 ------##
##------ Fri Oct 30 14:34:08 2020 ------##
##------ Fri Oct 30 16:02:41 2020 ------##
##------ Fri Oct 30 16:33:00 2020 ------##
##------ Fri Oct 30 16:34:05 2020 ------##
##------ Fri Oct 30 16:35:18 2020 ------##
##------ Fri Oct 30 16:37:13 2020 ------##
##------ Fri Oct 30 18:19:44 2020 ------##
set.seed(2020)
for (d in datasets){
message(d)
timestamp()
res_path <- paste0("results_2_0_0/",d,"/")
dir.create(res_path, showWarnings = FALSE)
data <- readRDS(paste0("datasets/", d, ".rds"))
split_path <- paste0("splits/", d, "/")
for (r in 3:6){
# message(r)
id_test <- readRDS(paste0(split_path, r, "_id_test.rds"))
train <- data[-id_test,]
test <- data[id_test,]
for (c_name in torun){
if(d == "tic_tac_toe" & any(c_name == c("st_hc_indep_7", "st_hc_indep_mi_7", "st_hc_indep_cmi_7", "st_hc_indep_ch_7",
"st_bhc_7", "st_bhc_mi_7", "st_bhc_cmi_7", "st_bhc_ch_7",
"st_hc_full_5", "st_hc_full_mi_5", "st_hc_full_cmi_5", "st_hc_full_ch_5")))
{
next
}
# message(c_name)
c_fun <- get(c_name)
time <- system.time(predict <- c_fun(train, test, optimizecutoff = TRUE))[3]
filename <- paste0(res_path, c_name, "_", r, ".rds")
if(time > 60) { cat(c_name, ":", time, "\n") }
saveRDS(list(time = time, predict = predict$pred, probability = predict$prob,
cutoff = predict$cutoff), file = filename)
}
}
}
##------ Fri Oct 30 18:22:59 2020 ------##
##------ Fri Oct 30 18:26:28 2020 ------##
##------ Fri Oct 30 18:42:41 2020 ------##
##------ Fri Oct 30 18:47:08 2020 ------##
##------ Fri Oct 30 18:59:52 2020 ------##
##------ Fri Oct 30 19:10:52 2020 ------##
##------ Fri Oct 30 20:21:19 2020 ------##
##------ Fri Oct 30 21:52:49 2020 ------##
##------ Sat Oct 31 00:51:45 2020 ------##
##------ Sat Oct 31 05:14:38 2020 ------##
##------ Sat Oct 31 07:20:41 2020 ------##
##------ Sat Oct 31 07:24:56 2020 ------##
##------ Sat Oct 31 07:29:49 2020 ------##
##------ Sat Oct 31 07:38:42 2020 ------##
##------ Sat Oct 31 14:24:59 2020 ------##
set.seed(2020)
for (d in datasets){
message(d)
timestamp()
res_path <- paste0("results_2_0_0/",d,"/")
dir.create(res_path, showWarnings = FALSE)
data <- readRDS(paste0("datasets/", d, ".rds"))
split_path <- paste0("splits/", d, "/")
for (r in 7:8){
# message(r)
id_test <- readRDS(paste0(split_path, r, "_id_test.rds"))
train <- data[-id_test,]
test <- data[id_test,]
for (c_name in torun){
if(d == "tic_tac_toe" & any(c_name == c("st_hc_indep_7", "st_hc_indep_mi_7", "st_hc_indep_cmi_7", "st_hc_indep_ch_7",
"st_bhc_7", "st_bhc_mi_7", "st_bhc_cmi_7", "st_bhc_ch_7",
"st_hc_full_5", "st_hc_full_mi_5", "st_hc_full_cmi_5", "st_hc_full_ch_5")))
{
next
}
# message(c_name)
c_fun <- get(c_name)
time <- system.time(predict <- c_fun(train, test, optimizecutoff = TRUE))[3]
filename <- paste0(res_path, c_name, "_", r, ".rds")
if(time > 60) { cat(c_name, ":", time, "\n") }
saveRDS(list(time = time, predict = predict$pred, probability = predict$prob,
cutoff = predict$cutoff), file = filename)
}
}
}
##------ Sun Nov  1 15:31:00 2020 ------##
##------ Sun Nov  1 15:32:40 2020 ------##
##------ Sun Nov  1 15:40:55 2020 ------##
##------ Sun Nov  1 15:43:05 2020 ------##
##------ Sun Nov  1 15:49:27 2020 ------##
##------ Sun Nov  1 15:55:02 2020 ------##
##------ Sun Nov  1 16:31:15 2020 ------##
##------ Sun Nov  1 17:33:43 2020 ------##
##------ Sun Nov  1 19:35:09 2020 ------##
##------ Sun Nov  1 21:52:25 2020 ------##
##------ Sun Nov  1 22:52:01 2020 ------##
##------ Sun Nov  1 22:54:06 2020 ------##
##------ Sun Nov  1 22:56:32 2020 ------##
##------ Sun Nov  1 23:02:27 2020 ------##
##------ Mon Nov  2 02:22:03 2020 ------##
set.seed(2020)
for (d in datasets){
message(d)
timestamp()
res_path <- paste0("results_2_0_0/",d,"/")
dir.create(res_path, showWarnings = FALSE)
data <- readRDS(paste0("datasets/", d, ".rds"))
split_path <- paste0("splits/", d, "/")
for (r in 9:10){
# message(r)
id_test <- readRDS(paste0(split_path, r, "_id_test.rds"))
train <- data[-id_test,]
test <- data[id_test,]
for (c_name in torun){
if(d == "tic_tac_toe" & any(c_name == c("st_hc_indep_7", "st_hc_indep_mi_7", "st_hc_indep_cmi_7", "st_hc_indep_ch_7",
"st_bhc_7", "st_bhc_mi_7", "st_bhc_cmi_7", "st_bhc_ch_7",
"st_hc_full_5", "st_hc_full_mi_5", "st_hc_full_cmi_5", "st_hc_full_ch_5")))
{
next
}
# message(c_name)
c_fun <- get(c_name)
time <- system.time(predict <- c_fun(train, test, optimizecutoff = TRUE))[3]
filename <- paste0(res_path, c_name, "_", r, ".rds")
if(time > 60) { cat(c_name, ":", time, "\n") }
saveRDS(list(time = time, predict = predict$pred, probability = predict$prob,
cutoff = predict$cutoff), file = filename)
}
}
}
##------ Mon Nov  2 09:42:39 2020 ------##
##------ Mon Nov  2 09:44:21 2020 ------##
##------ Mon Nov  2 09:52:27 2020 ------##
##------ Mon Nov  2 09:54:41 2020 ------##
##------ Mon Nov  2 10:00:47 2020 ------##
##------ Mon Nov  2 10:06:04 2020 ------##
##------ Mon Nov  2 10:46:36 2020 ------##
##------ Mon Nov  2 11:47:09 2020 ------##
##------ Mon Nov  2 12:53:44 2020 ------##
##------ Mon Nov  2 16:03:28 2020 ------##
##------ Mon Nov  2 17:00:27 2020 ------##
##------ Mon Nov  2 17:02:34 2020 ------##
##------ Mon Nov  2 17:04:49 2020 ------##
##------ Mon Nov  2 17:09:18 2020 ------##
##------ Mon Nov  2 20:36:51 2020 ------##
load("~/Desktop/Swiss Re/AlessandroUgolini/Stesura Paper/codice completo.RData")
str(dati0)
234+39
dati0$origine_etnica <- factor(dati0$origine_etnica)
colnames(dati0) <- c("origine_etnica", "tipo_allattamento", "lavare_denti", "igiene_orale",
"bibite", "verdure", "durata_allattamento", "durata_ciuccio", "variazione_carie")
dati0 <- na.exclude(dati0)
str(dati0)
library(gRbase)
library(gRim)
## tutti ma senza considerare l'origine etnica.
mod0_bis <- dmod(~.^., data = dati0[, -1])  # 276 obs. of  9 variables
mod0_bis
# STIMA STEPWISE
mod1_bis <- stepwise(mod0_bis)
mod1_bis
mod0_bis
summary(mod1_bis)
plot(as(mod1_bis, "igraph"))
senza_italiani <- dati0[dati0$origine_etnica == "S", -1]
table(senza_italiani$variazione_carie)
table(dati$var_cariecat)
prop.table(table(senza_italiani$variazione_carie))
prop.table(table(dati$var_cariecat))
citation()
citation("igraph")
citation("stagedtrees")
library(stagedtrees)
plot(stages_bj(full(PhDArticles), thr = 100))
plot(stages_bj(full(PhDArticles), thr = 1000))
plot(stages_bj(full(PhDArticles), thr = 100000000))
stages_bj(full(PhDArticles), thr = 100000000)$stages
stages_bj(full(PhDArticles), distance = "totvar", thr = 100000000)$stages
plot(stages_bj(full(PhDArticles), distance = "hellinger", thr = 100000000))
plot(stages_bj(full(PhDArticles), distance = "hellinger", thr = 100000000), col = "stages")
plot(stages_bj(full(PhDArticles), distance = "chan", thr = 100000000), col = "stages")
plot(stages_bj(full(PhDArticles), distance = "reny", thr = 100000000), col = "stages")
plot(stages_bj(full(PhDArticles), distance = "reny", thr = 100000000000000000000000000000), col = "stages")
full(PhDArticles)$prob$Married
stages_bj(full(PhDArticles), distance = "reny", thr = 100000000000000000000000000000)$stages
stages_bj(full(PhDArticles), distance = "reny", thr = 100000000000000000000000000000)$prob
summary(indep(PhDArticles))
str(Asym)
m0 <- full(PhDArticles)
m1 <- indep(PhDArticles)
compare_stages(m0, m1, method = "naive")
compare_stages(m0, m1, method = "naive", return_tree = T, plot = T)
m0$stages
m1$stages
compare_stages(m0, m1, method = "naive", return_tree = T, plot = T)
compare_stages(m1, m0, method = "naive", return_tree = T, plot = T)
compare_stages(m1, m0, method = "hamming", return_tree = T, plot = T)
compare_stages(m1, m0, method = "stages", return_tree = T, plot = T)
m1 <- stages_bhc(m0)
compare_stages(m0, m1, method = "naive", return_tree = T, plot = T)
m1$stages
compare_stages(m0, m1, method = "hamming", return_tree = T, plot = T)
compare_stages(m0, m1, method = "stages", return_tree = T, plot = T)
m0 <- full(PhDArticles)
m1 <- stages_bhc(m0)
m2 <- stages_hc(m0)
m3 <- stages_bj(m0)
m4 <- stages_fbhc(m0)
m5 <- stages_bhcr(m0)
m6 <- stages_hclust(m0)
m7 <- stages_kmeans(m0)
m8 <- stages_bj(m0, distance = "reny")
i<-m1
compare_stages(m0, i, method = "stages", return_tree = T, plot = F)
str(compare_stages(m0, i, method = "stages", return_tree = T, plot = F))
m5$score
BIC(m2)
compare_stages(m0, i, method = "naive",
return_tree = T, plot = F)
sapply(compare_stages(m0, i, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 0))
sapply(compare_stages(m0, i, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1))
sum(sapply(compare_stages(m0, i, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
modelli <- factor(c("m1", "m2", "m3", "m4", "m5", "m6", "m7", "m8"))
comparison <- matrix(NA, nrow = length(modelli), ncol = 3)
for(i in modelli) {
comparison[i, 1] <- sum(sapply(compare_stages(m0, i, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[i, 1] <- sum(sapply(compare_stages(m0, i, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 0)))
comparison[i, 1] <- sum(sapply(compare_stages(m0, i, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 0)))
}
i
i
modelli
modelli <- factor(m1,m2,m3,m4,m5,m6,m7,m8)
modelli <- factor(c(m1,m2,m3,m4,m5,m6,m7,m8))
c(m1,m2,m3,m4,m5,m6,m7,m8)
modelli
comparison <- matrix(NA, nrow = 8, ncol = 3)
comparison[1, 1] <- sum(sapply(compare_stages(m0, m1, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[2, 1] <- sum(sapply(compare_stages(m0, m2, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[3, 1] <- sum(sapply(compare_stages(m0, m3, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[4, 1] <- sum(sapply(compare_stages(m0, m4, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[5, 1] <- sum(sapply(compare_stages(m0, m5, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[6, 1] <- sum(sapply(compare_stages(m0, m6, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[7, 1] <- sum(sapply(compare_stages(m0, m7, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[8, 1] <- sum(sapply(compare_stages(m0, m8, method = "naive",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[1, 2] <- sum(sapply(compare_stages(m0, m1, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[2, 2] <- sum(sapply(compare_stages(m0, m2, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[3, 2] <- sum(sapply(compare_stages(m0, m3, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[4, 2] <- sum(sapply(compare_stages(m0, m4, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[5, 2] <- sum(sapply(compare_stages(m0, m5, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[6, 2] <- sum(sapply(compare_stages(m0, m6, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[7, 2] <- sum(sapply(compare_stages(m0, m7, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[8, 2] <- sum(sapply(compare_stages(m0, m8, method = "hamming",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[1, 3] <- sum(sapply(compare_stages(m0, m1, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[2, 3] <- sum(sapply(compare_stages(m0, m2, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[3, 3] <- sum(sapply(compare_stages(m0, m3, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[4, 3] <- sum(sapply(compare_stages(m0, m4, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[5, 3] <- sum(sapply(compare_stages(m0, m5, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[6, 3] <- sum(sapply(compare_stages(m0, m6, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[7, 3] <- sum(sapply(compare_stages(m0, m7, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison[8, 3] <- sum(sapply(compare_stages(m0, m8, method = "stages",
return_tree = T, plot = F), function(x) sum(1 * x == 1)))
comparison
plot(m0, ignore = FALSE)
plot(m0, ignore = TRUE)
m0$stages
plot(m0)
plot(m0, ignore = "")
plot(m0, ignore = m0$name_unobserved)
titanic.df <- as.data.frame(Titanic)titanic.df <- titanic.df[rep(row.names(titanic.df),
titanic.df$Freq), 1:4]
titanic.df <- as.data.frame(Titanic);titanic.df <- titanic.df[rep(row.names(titanic.df),
titanic.df$Freq), 1:4]
titanic.df
mod.bn <- bnlearn::hc(titanic.df)
mod.bn <- bn.fit(mod.bn, titanic.df);
bn.tree <- sevt_fit(as_sevt(mod.bn),
data = titanic.df, lambda = 0)
library(bnlearn)
mod.bn <- bn.fit(mod.bn, titanic.df);
bn.tree <- sevt_fit(as_sevt(mod.bn),
data = titanic.df, lambda = 0)
mod4 <- stages_hclust(bn.tree, k = 2);
plot(mod4, col = function(x) c("red3", "blue3"))
mod4 <- stages_hclust(bn.tree, k = 2);
plot(mod4, col = c("red3", "blue3"))
